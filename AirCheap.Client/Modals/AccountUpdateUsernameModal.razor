@layout MainLayout

@if (ShowErrors)
{
    <ul class="list-group mb-4 mx-auto">
        @foreach (string error in Errors)
        {
            <li class="list-group-item list-group-item-danger">@error</li>
        }
    </ul>
}

<div class="card text-center" style="width: 35rem;">
    <div class="card-body">
        @if (UserUpdateUsernameDto is null)
        {
            <div class="mt-3">
                <div class="spinner-border" role="status"></div>
                <p>Loading...</p>
            </div>
        }
        else
        {
            <p class="lead">After updating your username you will be prompted login.</p>
            <EditForm Model="UserUpdateUsernameDto" OnValidSubmit="HandleUpdateUserUsernameAsync">
                <div class="form-floating mb-3">
                    <InputText class="form-control" placeholder="New username" @bind-Value="UserUpdateUsernameDto.NewUsername" />
                    <label>New username</label>
                </div>

                <div class="d-flex justify-content-center">
                    <button class="btn btn-success my-2 d-flex align-items-center justify-content-center" style="padding-right: 1.5rem; width: 100%">
                        <RadzenIcon Icon="check" class="mx-2" /> Confirm
                    </button>
                </div>
            </EditForm>
        }
    </div>
    <div class="card-footer d-flex justify-content-center">
        <button class="btn btn-danger my-2 d-flex align-items-center justify-content-center" @onclick="ModalInstance.CancelAsync" style="padding-right: 1.5rem; width: 10rem;">
            <RadzenIcon Icon="close" class="mx-2" /> Close
        </button>
    </div>
</div>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private IUserApiService UserApiService { get; set; }

    [Inject]
    private IValidator<UserUpdateUsernameDto> UserUpdateUsernameDtoValidator { get; set; }

    [CascadingParameter]
    private IModalService ModalService { get; set; }

    [CascadingParameter]
    private BlazoredModalInstance ModalInstance { get; set; }

    [Parameter]
    public string Username { get; set; }

    private UserUpdateUsernameDto UserUpdateUsernameDto { get; set; }

    private bool ShowErrors { get; set; }

    private List<string> Errors { get; set; } = new();

    protected override void OnParametersSet()
    {
        LoadUser();
    }

    private void LoadUser()
    {
        UserUpdateUsernameDto = new UserUpdateUsernameDto();
        UserUpdateUsernameDto.Username = Username;
        UserUpdateUsernameDto.NewUsername = Username;
    }

    private async Task HandleUpdateUserUsernameAsync()
    {
        ShowErrors = false;
        Errors.Clear();

        if (FormIsValid())
        {
            EmptyResponseDto response = await UserApiService.UpdateUserUsernameAsync(UserUpdateUsernameDto);

            if (response.Success)
            {
                await ModalInstance.CloseAsync();
                return;
            }

            Errors.AddRange(response.Errors);
            ShowErrors = true;
        }
    }

    private bool FormIsValid()
    {
        ValidationResult validationResult = UserUpdateUsernameDtoValidator.Validate(UserUpdateUsernameDto);

        if (validationResult.IsValid) return true;

        Errors.AddRange(validationResult.Errors.Select(error => error.ErrorMessage));

        ShowErrors = true;

        return false;
    }
}
