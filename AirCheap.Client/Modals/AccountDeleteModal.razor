@layout MainLayout

@if (ShowErrors)
{
    <ul class="list-group mb-4 mx-auto">
        @foreach (string error in Errors)
        {
            <li class="list-group-item list-group-item-danger">@error</li>
        }
    </ul>
}

<div class="card text-center" style="width: 35rem;">
    <div class="card-body">
        <h4 class="mb-3">Are you sure you want to delete your account, @Username?</h4>
    </div>
    <div class="card-footer d-flex justify-content-between px-5">
        <button class="btn btn-danger my-2 d-flex align-items-center justify-content-center" @onclick="HandleDeleteAccountAsync" style="padding-right: 1.5rem; width: 10rem;">
            <RadzenIcon Icon="delete" class="mx-2" /> Delete
        </button>

        <button class="btn btn-primary my-2 d-flex align-items-center justify-content-center" @onclick="ModalInstance.CancelAsync" style="padding-right: 1.5rem; width: 10rem;">
            <RadzenIcon Icon="close" class="mx-2" /> Cancel
        </button>
    </div>
</div>

@code {
    [Inject]
    private IUserApiService UserApiService { get; set; }

    [CascadingParameter]
    private BlazoredModalInstance ModalInstance { get; set; }

    [Parameter]
    public string Username { get; set; }

    private bool ShowErrors { get; set; }

    private List<string> Errors { get; set; } = new();

    private async Task HandleDeleteAccountAsync()
    {
        ShowErrors = false;
        Errors.Clear();

        EmptyResponseDto response = await UserApiService.DeleteUserAsync(Username);

        if (response.Success)
        {
            await ModalInstance.CloseAsync();
            return;
        }

        Errors.AddRange(response.Errors);
        ShowErrors = true;
    }
}