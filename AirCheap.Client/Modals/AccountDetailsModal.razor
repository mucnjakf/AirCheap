@layout MainLayout

@if (ShowErrors)
{
    <ul class="list-group mb-4 mx-auto">
        @foreach (string error in Errors)
        {
            <li class="list-group-item list-group-item-danger">@error</li>
        }
    </ul>
}

<div class="card text-center" style="width: 35rem;">
    <div class="card-body">
        @if (UserDetails is null)
        {
            <div class="mt-3">
                <div class="spinner-border" role="status"></div>
                <p>Loading...</p>
            </div>
        }
        else
        {
            <div class="input-group mb-3">
                <label class="input-group-text fw-bold">ID</label>
                <label class="form-control text-start">
                    @UserDetails.Id
                </label>
            </div>

            <div class="input-group">
                <label class="input-group-text fw-bold">Username</label>
                <label class="form-control text-start">
                    @UserDetails.Username
                </label>
            </div>

            <div class="input-group mt-3">
                <label class="input-group-text fw-bold">E-Mail</label>
                <label class="form-control text-start">
                    @UserDetails.Email
                </label>
            </div>

            <div class="input-group mt-3">
                <label class="input-group-text fw-bold">First name</label>
                <label class="form-control text-start">
                    @UserDetails.FirstName
                </label>
            </div>

            <div class="input-group mt-3">
                <label class="input-group-text fw-bold">Last name</label>
                <label class="form-control text-start">
                    @UserDetails.LastName
                </label>
            </div>
        }
    </div>
    <div class="card-footer d-flex justify-content-center">
        <button class="btn btn-danger my-2 d-flex align-items-center justify-content-center" @onclick="ModalInstance.CancelAsync" style="padding-right: 1.5rem; width: 10rem;">
            <RadzenIcon Icon="close" class="mx-2" /> Close
        </button>
    </div>
</div>

@code {
    [Inject]
    private IUserApiService UserApiService { get; set; }

    [CascadingParameter]
    private BlazoredModalInstance ModalInstance { get; set; }

    [Parameter]
    public string Username { get; set; }

    private UserDetails UserDetails { get; set; }

    private bool ShowErrors { get; set; }

    private List<string> Errors { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadUserAsync();
    }

    private async Task LoadUserAsync()
    {
        ShowErrors = false;
        Errors.Clear();

        ResultResponseDto<UserDetails> response = await UserApiService.GetUserAsync(Username);

        if (response.Success)
        {
            UserDetails = response.ObjectResult;
            return;
        }

        Errors.AddRange(response.Errors);
        ShowErrors = true;
    }
}